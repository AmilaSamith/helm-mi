[server]
hostname = {{ .Values.wso2.deployment.hostname | quote }}
offset  = {{ .Values.wso2.config.portOffset }}

[user_store]
{{- if .Values.wso2.config.userstore.rdbms }}
class = "org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager"
type = "database"
{{- else }}
type = "read_only_ldap"
{{- end }}

[internal_apis.file_user_store]
enable = {{ .Values.wso2.config.userstore.file.enabled }}

[super_admin]
username = {{ .Values.wso2.config.admin.username | quote }}
create_admin_account = {{ .Values.wso2.config.admin.createAdminAccount }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{super_admin_password}"
{{- else }}
password = {{ .Values.wso2.config.admin.password | quote }}
{{- end }}

[keystore.primary]
file_name = "repository/resources/security/{{ .Values.wso2.config.keyStore.primary.fileName }}"
alias = {{ .Values.wso2.config.keyStore.primary.alias | quote }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{primary_keystore_password}"
key_password = "$secret{primary_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.config.keyStore.primary.password | quote }}
key_password = {{ .Values.wso2.config.keyStore.primary.keyPassword | quote }}
{{- end }}

[keystore.internal]
file_name = "repository/resources/security/{{ .Values.wso2.config.keyStore.internal.fileName }}"
alias = {{ .Values.wso2.config.keyStore.internal.alias | quote }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{internal_keystore_password}"
key_password = "$secret{internal_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.config.keyStore.internal.password | quote }}
key_password = {{ .Values.wso2.config.keyStore.internal.keyPassword | quote }}
{{- end }}

[truststore]
file_name = "repository/resources/security/{{ .Values.wso2.config.trustStore.primary.fileName }}"
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{primary_truststore_password}"
{{- else }}
password = {{ .Values.wso2.config.trustStore.primary.password | quote }}
{{- end }}
alias = "symmetric.key.value"
algorithm = "AES"

{{- if .Values.wso2.config.userstore.rdbms }}
[[datasource]]
id = "WSO2CarbonDB"
url = {{ .Values.wso2.config.userstore.rdbms.url | quote }}
username = {{ .Values.wso2.config.userstore.rdbms.username | quote }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{user_db_password}"
{{- else }}
password = {{ .Values.wso2.config.userstore.rdbms.password | quote }}
{{- end }}
driver = {{ .Values.wso2.config.userstore.rdbms.jdbc.driver | quote }}
{{- range $key, $value := .Values.wso2.config.userstore.rdbms.jdbc.poolParameters }}
{{ if typeIs "string" $value }}
pool_options.{{ $key }} = {{ $value | quote }}
{{- else }}
pool_options.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.coordination }}
[[datasource]]
id = "WSO2_COORDINATION_DB"
url = {{ .Values.wso2.config.coordination.rdbms.url | quote }}
username = {{ .Values.wso2.config.coordination.rdbms.username | quote }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{coordination_db_password}"
{{- else }}
password = {{ .Values.wso2.config.coordination.rdbms.password | quote }}
{{- end }}
driver = {{ .Values.wso2.config.coordination.rdbms.jdbc.driver | quote }}
{{- range $key, $value := .Values.wso2.config.coordination.rdbms.jdbc.poolParameters }}
{{ if typeIs "string" $value }}
pool_options.{{ $key }} = {{ $value | quote }}
{{- else }}
pool_options.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.coordination.nodeId }}
[cluster_config]
node_id = {{ .Values.wso2.config.coordination.nodeId | quote }}
{{- end }}
{{- end }}

{{ if .Values.wso2.config.secureVault.enabled }}
[secrets]
super_admin_password = {{ .Values.wso2.config.admin.password | quote }}
primary_keystore_password = {{ .Values.wso2.config.keyStore.primary.password | quote }}
primary_keystore_key_password = {{ .Values.wso2.config.keyStore.primary.keyPassword | quote }}
internal_keystore_password = {{ .Values.wso2.config.keyStore.internal.password | quote }}
internal_keystore_key_password = {{ .Values.wso2.config.keyStore.internal.keyPassword | quote }}
primary_truststore_password = {{ .Values.wso2.config.trustStore.primary.password | quote }}
{{- if .Values.wso2.config.userstore.rdbms }}
user_db_password = {{ .Values.wso2.config.userstore.rdbms.password | quote }}
{{- end }}
{{- if and (.Values.wso2.config.keyStore.transport) (.Values.wso2.config.keyStore.transport.listener) }}
transport_listener_keystore_password = {{ .Values.wso2.config.keyStore.transport.listener.password | quote }}
transport_listener_keystore_key_password = {{ .Values.wso2.config.keyStore.transport.listener.keyPassword | quote }}
{{- end }}
{{- if and (.Values.wso2.config.trustStore.transport) (.Values.wso2.config.trustStore.transport.listener) }}
transport_listener_truststore_password = {{ .Values.wso2.config.trustStore.transport.listener.password | quote }}
{{- end }}
{{- if and (.Values.wso2.config.keyStore.transport) (.Values.wso2.config.keyStore.transport.sender) }}
transport_sender_keystore_password = {{ .Values.wso2.config.keyStore.transport.sender.password | quote }}
transport_sender_keystore_key_password = {{ .Values.wso2.config.keyStore.transport.sender.keyPassword | quote }}
{{- end }}
{{- if and (.Values.wso2.config.trustStore.transport) (.Values.wso2.config.trustStore.transport.sender) }}
transport_sender_truststore_password = {{ .Values.wso2.config.trustStore.transport.sender.password | quote }}
{{- end }}
{{- if .Values.wso2.config.serviceCatalog }}
service_catalog_password = {{ .Values.wso2.config.serviceCatalog.password | quote }}
{{- end }}
{{- end }}

{{ if .Values.wso2.config.dashboard }}
[dashboard_config]
dashboard_url = {{ .Values.wso2.config.dashboard.url | quote }}
{{- if .Values.wso2.config.dashboard.heartbeatInterval }}
heartbeat_interval = {{ .Values.wso2.config.dashboard.heartbeatInterval }}
{{- end }}
{{- if .Values.wso2.config.dashboard.groupId }}
group_id = {{ .Values.wso2.config.dashboard.groupId | quote }}
{{- else }}
group_id = {{ .Release.Name | quote }}
{{- end }}
{{- if .Values.wso2.config.dashboard.nodeId }}
node_id = {{ .Values.wso2.config.dashboard.nodeId | quote }}
{{- else }}
node_id = "$env{POD_NAME}"
{{- end }}
{{- end }}

{{- if and (.Values.wso2.config.keyStore.transport) (.Values.wso2.config.keyStore.transport.listener) }}
[transport.http.listener.keystore]
file_name = "repository/resources/security/{{ .Values.wso2.config.keyStore.transport.listener.fileName }}"
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{transport_listener_keystore_password}"
key_password = "$secret{transport_listener_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.config.keyStore.transport.listener.password | quote }}
key_password = {{ .Values.wso2.config.keyStore.transport.listener.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if and (.Values.wso2.config.trustStore.transport) (.Values.wso2.config.trustStore.transport.listener) }}
[transport.http.listener.truststore]
file_name = "repository/resources/security/{{ .Values.wso2.config.trustStore.transport.listener.fileName }}"
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{transport_listener_truststore_password}"
{{- else }}
password = {{ .Values.wso2.config.trustStore.transport.listener.password | quote }}
{{- end }}
{{- end }}

{{- if and (.Values.wso2.config.keyStore.transport) (.Values.wso2.config.keyStore.transport.sender) }}
[transport.http.sender.keystore]
file_name = "repository/resources/security/{{ .Values.wso2.config.keyStore.transport.sender.fileName }}"
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{transport_sender_keystore_password}"
key_password = "$secret{transport_sender_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.config.keyStore.transport.sender.password | quote }}
key_password = {{ .Values.wso2.config.keyStore.transport.sender.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if and (.Values.wso2.config.trustStore.transport) (.Values.wso2.config.trustStore.transport.sender) }}
[transport.http.sender.truststore]
file_name = "repository/resources/security/{{ .Values.wso2.config.trustStore.transport.sender.fileName }}"
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{transport_sender_truststore_password}"
{{- else }}
password = {{ .Values.wso2.config.trustStore.transport.sender.password | quote }}
{{- end }}
{{- end }}

{{ if .Values.wso2.config.serviceCatalog }}
[[service_catalog]]
apim_host = {{ .Values.wso2.config.serviceCatalog.apimHost | quote }}
enable = {{ .Values.wso2.config.serviceCatalog.enabled }}
username = {{ .Values.wso2.config.serviceCatalog.username | quote }}
{{- if .Values.wso2.config.secureVault.enabled }}
password = "$secret{service_catalog_password}"
{{- else }}
password = {{ .Values.wso2.config.serviceCatalog.password | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.transport }}
{{- if .Values.wso2.config.transport.jms }}
[transport.jms]
{{- if .Values.wso2.config.transport.jms.sender }}
sender_enable = true
{{- end }}
{{- if .Values.wso2.config.transport.jms.listener }}
listener_enable = true
{{- end }}

{{- range $key, $value := .Values.wso2.config.transport.jms.sender }}
[[transport.jms.sender]]
name = {{ $value.name | quote }}
{{- range $key, $value := $value.parameters }}
{{ if typeIs "string" $value }}
parameter.{{ $key }} = {{ $value | quote }}
{{- else }}
parameter.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- end }}

{{- range $key, $value := .Values.wso2.config.transport.jms.listener }}
[[transport.jms.listener]]
name = {{ $value.name | quote }}
{{- range $key, $value := $value.parameters }}
{{ if typeIs "string" $value }}
parameter.{{ $key }} = {{ $value | quote }}
{{- else }}
parameter.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- if .Values.wso2.config.transport.jndi }}
{{- if .Values.wso2.config.transport.jndi.connectionFactories }}
[transport.jndi.connection_factories]
{{- range $key, $value := .Values.wso2.config.transport.jndi.connectionFactories }}
{{ $value.name }} = {{ $value.url | quote }}
{{- end }}
{{- end}}

{{- if .Values.wso2.config.transport.jndi.queue }}
[transport.jndi.queue]
{{- range $key, $value := .Values.wso2.config.transport.jndi.queue }}
{{ $value.jndiName }} = {{ $value.physicalName | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.transport.jndi.topic }}
[transport.jndi.topic]
{{- range $key, $value := .Values.wso2.config.transport.jndi.topic }}
{{ $value.jndiName }} = {{ $value.physicalName | quote }}
{{- end }}
{{- end }}

{{- end}}
{{- if .Values.wso2.config.transport.rabbitmq }}
[transport.rabbitmq]
{{- if .Values.wso2.config.transport.rabbitmq.sender }}
sender_enable = true
{{ end }}
{{- if .Values.wso2.config.transport.rabbitmq.listener }}
listener_enable = true
{{ end }}

{{- range $key, $value := .Values.wso2.config.transport.rabbitmq.sender }}
[[transport.rabbitmq.sender]]
name = {{ $value.name | quote }}
{{- range $key, $value := $value.parameters }}
{{ if typeIs "string" $value }}
parameter.{{ $key }} = {{ $value | quote }}
{{- else }}
parameter.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- end }}

{{- range $key, $value := .Values.wso2.config.transport.rabbitmq.listener }}
[[transport.rabbitmq.listener]]
name = {{ $value.name | quote }}
{{- range $key, $value := $value.parameters }}
{{- if typeIs "string" $value }}
parameter.{{ $key }} = {{ $value | quote }}
{{- else }}
parameter.{{ $key }} = {{ $value }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.mediation }}
[mediation]
{{- if .Values.wso2.config.mediation.synapse }}
{{- if .Values.wso2.config.mediation.synapse.coreThreads }}
synapse.core_threads = {{ .Values.wso2.config.mediation.synapse.coreThreads }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.maxThreads }}
synapse.max_threads = {{ .Values.wso2.config.mediation.synapse.maxThreads }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.threadsQueueLength }}
synapse.threads_queue_length = {{ .Values.wso2.config.mediation.synapse.threadsQueueLength }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.globalTimeoutInterval }}
synapse.global_timeout_interval = {{ .Values.wso2.config.mediation.synapse.globalTimeoutInterval }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.enableXpathDomFailover }}
synapse.enable_xpath_dom_failover = {{ .Values.wso2.config.mediation.synapse.enableXpathDomFailover }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.tempDataChunkSize }}
synapse.temp_data_chunk_size = {{ .Values.wso2.config.mediation.synapse.tempDataChunkSize }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.commandDebuggerPort }}
synapse.command_debugger_port = {{ .Values.wso2.config.mediation.synapse.commandDebuggerPort }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.eventDebuggerPort }}
synapse.event_debugger_port = {{ .Values.wso2.config.mediation.synapse.eventDebuggerPort }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.scriptMediatorPoolSize }}
synapse.script_mediator_pool_size = {{ .Values.wso2.config.mediation.synapse.scriptMediatorPoolSize }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.enableXmlNil }}
synapse.enable_xml_nil = {{ .Values.wso2.config.mediation.synapse.enableXmlNil }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.disableAutoPrimitiveRegex }}
synapse.disable_auto_primitive_regex = {{ .Values.wso2.config.mediation.synapse.disableAutoPrimitiveRegex | quote }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.disableCustomReplaceRegex }}
synapse.disable_custom_replace_regex = {{ .Values.wso2.config.mediation.synapse.disableCustomReplaceRegex | quote }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.enableNamespaceDeclaration }}
synapse.enable_namespace_declaration = {{ .Values.wso2.config.mediation.synapse.enableNamespaceDeclaration }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.buildValidNcName }}
synapse.build_valid_nc_name = {{ .Values.wso2.config.mediation.synapse.buildValidNcName }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.enableAutoPrimitive }}
synapse.enable_auto_primitive = {{ .Values.wso2.config.mediation.synapse.enableAutoPrimitive }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.jsonOutAutoArray }}
synapse.json_out_auto_array = {{ .Values.wso2.config.mediation.synapse.jsonOutAutoArray }}
{{- end }}
{{- if .Values.wso2.config.mediation.synapse.preserveNamespaceOnXmlToJson }}
synapse.preserve_namespace_on_xml_to_json = {{ .Values.wso2.config.mediation.synapse.preserveNamespaceOnXmlToJson }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.mediation.flow }}
{{- if .Values.wso2.config.mediation.flow.statistics }}
{{- if .Values.wso2.config.mediation.flow.statistics.enable }}
flow.statistics.enable = {{ .Values.wso2.config.mediation.flow.statistics.enable }}
{{- end }}
{{- if .Values.wso2.config.mediation.flow.statistics.captureAll }}
flow.statistics.capture_all = {{ .Values.wso2.config.mediation.flow.statistics.captureAll }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.mediation.flow.tracer }}
{{- if .Values.wso2.config.mediation.flow.tracer.collectPayloads }}
stat.tracer.collect_payloads = {{ .Values.wso2.config.mediation.flow.tracer.collectPayloads }}
{{- end }}
{{- if .Values.wso2.config.mediation.flow.tracer.collectMediationProperties }}
stat.tracer.collect_mediation_properties = {{ .Values.wso2.config.mediation.flow.tracer.collectMediationProperties }}
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.mediation.statistics }}
{{- if .Values.wso2.config.mediation.statistics.enableClean }}
statistics.enable_clean = {{ .Values.wso2.config.mediation.statistics.enableClean }}
{{- end }}
{{- if .Values.wso2.config.mediation.statistics.cleanInterval }}
statistics.clean_interval = {{ .Values.wso2.config.mediation.statistics.cleanInterval }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.mediation.inbound }}
{{- if .Values.wso2.config.mediation.inbound.coreThreads }}
inbound.core_threads = {{ .Values.wso2.config.mediation.inbound.coreThreads }}
{{- end }}
{{- if .Values.wso2.config.mediation.inbound.maxThreads }}
inbound.max_threads = {{ .Values.wso2.config.mediation.inbound.maxThreads }}
{{- end }}
{{- if .Values.wso2.config.mediation.inbound.portOffsetEnable }}
inbound.port_offset_enable = {{ .Values.wso2.config.mediation.inbound.portOffsetEnable }}
{{- end }}
{{- end }}
{{- if .Values.wso2.config.mediation.internalHttpApiEnable }}
internal_http_api_enable = {{ .Values.wso2.config.mediation.internalHttpApiEnable }}
{{- end }}
{{- if .Values.wso2.config.mediation.internalHttpApiPort }}
internal_http_api_port = {{ .Values.wso2.config.mediation.internalHttpApiPort }}
{{- end }}
{{- if .Values.wso2.config.mediation.internalHttpsApiPort }}
internal_https_api_port = {{ .Values.wso2.config.mediation.internalHttpsApiPort }}
{{- end }}
{{- end }}

{{ if .Values.wso2.config.opentelemetry }}
[opentelemetry]
{{- if .Values.wso2.config.opentelemetry.enable }}
enable = {{ .Values.wso2.config.opentelemetry.enable }}
{{- end }}
{{- if .Values.wso2.config.opentelemetry.type }}
type = {{ .Values.wso2.config.opentelemetry.type | quote }}
{{- end }}
{{- if .Values.wso2.config.opentelemetry.host }}
host = {{ .Values.wso2.config.opentelemetry.host | quote }}
{{- end }}
{{- if .Values.wso2.config.opentelemetry.port }}
port = {{ .Values.wso2.config.opentelemetry.port | quote }}
{{- end }}
{{- if .Values.wso2.config.opentelemetry.url }}
url = {{ .Values.wso2.config.opentelemetry.url | quote }}
{{- end }}
{{- end }}

{{ if .Values.wso2.config.analytics }}
[analytics]
enabled = {{ .Values.wso2.config.analytics.enabled }}
publisher = {{ .Values.wso2.config.analytics.publisher | quote }}
id = {{ .Values.wso2.config.analytics.id | quote }}
prefix = {{ .Values.wso2.config.analytics.prefix | quote }}
api_analytics.enabled = {{ .Values.wso2.config.analytics.apiAnalytics }}
proxy_service_analytics.enabled = {{ .Values.wso2.config.analytics.proxyServiceAnalytics }}
sequence_analytics.enabled = {{ .Values.wso2.config.analytics.sequenceAnalytics }}
endpoint_analytics.enabled = {{ .Values.wso2.config.analytics.endpointAnalytics }}
{{- end }}

{{- range $key, $value := .Values.wso2.config.synapseHandlers }}
[[synapse_handlers]]
name = {{ $value.name | quote }}
class = {{ $value.class | quote }}
{{ end }}

{{- if .Values.wso2.config.messageFormatters }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking }}
[message_formatters]
{{- if .Values.wso2.config.messageFormatters.nonBlocking.formUrlencoded }}
form_urlencoded = {{ .Values.wso2.config.messageFormatters.nonBlocking.formUrlencoded }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.multipartFormData }}
multipart_form_data = {{ .Values.wso2.config.messageFormatters.nonBlocking.multipartFormData }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.applicationXml }}
application_xml = {{ .Values.wso2.config.messageFormatters.nonBlocking.applicationXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.textXml }}
text_xml = {{ .Values.wso2.config.messageFormatters.nonBlocking.textXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.soapXml }}
soap_xml = {{ .Values.wso2.config.messageFormatters.nonBlocking.soapXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.textPlain }}
text_plain = {{ .Values.wso2.config.messageFormatters.nonBlocking.textPlain }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.applicationJson }}
application_json = {{ .Values.wso2.config.messageFormatters.nonBlocking.applicationJson }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.jsonBadgerfish }}
json_badgerfish = {{ .Values.wso2.config.messageFormatters.nonBlocking.jsonBadgerfish }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.textJavascript }}
text_javascript = {{ .Values.wso2.config.messageFormatters.nonBlocking.textJavascript }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.octetStream }}
octet_stream = {{ .Values.wso2.config.messageFormatters.nonBlocking.octetStream }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.nonBlocking.applicationBinary }}
application_binary = {{ .Values.wso2.config.messageFormatters.nonBlocking.applicationBinary }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.messageFormatters.blocking }}
[blocking.message_formatters]
{{- if .Values.wso2.config.messageFormatters.blocking.formUrlencoded }}
form_urlencoded = {{ .Values.wso2.config.messageFormatters.blocking.formUrlencoded }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.multipartFormData }}
multipart_form_data = {{ .Values.wso2.config.messageFormatters.blocking.multipartFormData }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.applicationXml }}
application_xml = {{ .Values.wso2.config.messageFormatters.blocking.applicationXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.textXml }}
text_xml = {{ .Values.wso2.config.messageFormatters.blocking.textXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.soapXml }}
soap_xml = {{ .Values.wso2.config.messageFormatters.blocking.soapXml }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.textPlain }}
text_plain = {{ .Values.wso2.config.messageFormatters.blocking.textPlain }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.applicationJson }}
application_json = {{ .Values.wso2.config.messageFormatters.blocking.applicationJson }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.jsonBadgerfish }}
json_badgerfish = {{ .Values.wso2.config.messageFormatters.blocking.jsonBadgerfish }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.textJavascript }}
text_javascript = {{ .Values.wso2.config.messageFormatters.blocking.textJavascript }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.octetStream }}
octet_stream = {{ .Values.wso2.config.messageFormatters.blocking.octetStream }}
{{- end }}
{{- if .Values.wso2.config.messageFormatters.blocking.applicationBinary }}
application_binary = {{ .Values.wso2.config.messageFormatters.blocking.applicationBinary }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.messageFormatters.custom }}
{{- range $key, $value := .Values.wso2.config.messageFormatters.custom.nonBlocking }}
[[custom_message_formatters]]
content_type = {{ $value.contentType | quote }}
class = {{ $value.class | quote }}
{{ end }}

{{- range $key, $value := .Values.wso2.config.messageFormatters.custom.blocking }}
[[blocking.custom_message_formatters]]
content_type = {{ $value.contentType | quote }}
class = {{ $value.class | quote }}
{{ end }}
{{ end }}
{{- end }}

{{- if .Values.wso2.config.messageBuilders }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking }}
[message_builders]
{{- if .Values.wso2.config.messageBuilders.nonBlocking.applicationXml }}
application_xml = {{ .Values.wso2.config.messageBuilders.nonBlocking.applicationXml }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.formUrlencoded }}
form_urlencoded = {{ .Values.wso2.config.messageBuilders.nonBlocking.formUrlencoded }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.multipartFormData }}
multipart_form_data = {{ .Values.wso2.config.messageBuilders.nonBlocking.multipartFormData }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.textPlain }}
text_plain = {{ .Values.wso2.config.messageBuilders.nonBlocking.textPlain }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.applicationJson }}
application_json = {{ .Values.wso2.config.messageBuilders.nonBlocking.applicationJson }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.jsonBadgerfish }}
json_badgerfish = {{ .Values.wso2.config.messageBuilders.nonBlocking.jsonBadgerfish }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.textJavascript }}
text_javascript = {{ .Values.wso2.config.messageBuilders.nonBlocking.textJavascript }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.octetStream }}
octet_stream = {{ .Values.wso2.config.messageBuilders.nonBlocking.octetStream }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.nonBlocking.applicationBinary }}
application_binary = {{ .Values.wso2.config.messageBuilders.nonBlocking.applicationBinary }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.messageBuilders.blocking }}
[blocking.message_builders]
{{- if .Values.wso2.config.messageBuilders.blocking.applicationXml }}
application_xml = {{ .Values.wso2.config.messageBuilders.blocking.applicationXml }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.formUrlencoded }}
form_urlencoded = {{ .Values.wso2.config.messageBuilders.blocking.formUrlencoded }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.multipartFormData }}
multipart_form_data = {{ .Values.wso2.config.messageBuilders.blocking.multipartFormData }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.textPlain }}
text_plain = {{ .Values.wso2.config.messageBuilders.blocking.textPlain }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.applicationJson }}
application_json = {{ .Values.wso2.config.messageBuilders.blocking.applicationJson }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.jsonBadgerfish }}
json_badgerfish = {{ .Values.wso2.config.messageBuilders.blocking.jsonBadgerfish }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.textJavascript }}
text_javascript = {{ .Values.wso2.config.messageBuilders.blocking.textJavascript }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.octetStream }}
octet_stream = {{ .Values.wso2.config.messageBuilders.blocking.octetStream }}
{{- end }}
{{- if .Values.wso2.config.messageBuilders.blocking.applicationBinary }}
application_binary = {{ .Values.wso2.config.messageBuilders.blocking.applicationBinary }}
{{- end }}
{{- end }}

{{- if .Values.wso2.config.messageBuilders.custom }}
{{- range $key, $value := .Values.wso2.config.messageBuilders.custom.nonBlocking }}
[[custom_message_builders]]
content_type = {{ $value.contentType | quote }}
class = {{ $value.class | quote }}
{{ end }}

{{- range $key, $value := .Values.wso2.config.messageBuilders.custom.blocking }}
[[blocking.custom_message_builders]]
content_type = {{ $value.contentType | quote }}
class = {{ $value.class | quote }}
{{ end }}
{{ end }}
{{- end }}
